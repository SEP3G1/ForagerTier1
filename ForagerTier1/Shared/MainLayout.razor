@inherits LayoutComponentBase
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@using System.Windows.Input
@using Syncfusion.Blazor.DropDowns;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISocketService SocketService
@inject IUserService UserService

<div class="main">
    <div id="headNav" class="@(hidden ? "hidden" : "")">


        <!-- "HTML Datalist søgebar" -->
         <div id="sticky" class="searchCont ">
             <svg class="searchIcon" @onclick="@search" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                  viewBox="0 0 373.12 373.12" style="enable-background:new 0 0 373.12 373.12;" xml:space="preserve">
             <g>
             <g>
             <path d="M266.667,234.667h-16.96l-5.867-5.867c20.907-24.213,33.493-55.68,33.493-90.133C277.333,62.08,215.253,0,138.667,0
                         S0,62.08,0,138.667s62.08,138.667,138.667,138.667c34.453,0,65.92-12.587,90.133-33.387l5.867,5.867v16.853L341.333,373.12
                         l31.787-31.787L266.667,234.667z M138.667,234.667c-53.013,0-96-42.987-96-96c0-53.013,42.987-96,96-96c53.013,0,96,42.987,96,96
                         C234.667,191.68,191.68,234.667,138.667,234.667z" />















                 </g>
             </g>
         </svg>
             <datalist id="suggestions">
                 @if (suggestionList != null)
                 {
                     @foreach (var suggestion in suggestionList)
                     {
                         <option value="@suggestion">@suggestion</option>
                     }
                 }
             </datalist>
             <input type="text" @bind="@value" @onkeyup="@KeyUp" id="searchIndex" placeholder="search" autoComplete="on" list="suggestions" />
         </div>


        <div id="header" class="headCont">
            <AuthorizeView>
                <Authorized>
                    @if (user != null)
                    {
                        <p>Hi, @user.Name</p>
                    }
                    <a class="login" @onclick="@logout">Logout</a>
                </Authorized>
            </AuthorizeView>
            <button class="navButton"><a href="find">buy</a></button>
            <a href="/"><div class="logo">forager<span>.</span></div></a>
            <button class="navButton"><a href="sell">sell</a></button>
            <AuthorizeView>
                <NotAuthorized>
                    <a class="login" @onclick="@login">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <!-- "Syncfusion søgebar" -->
    <SfComboBox TValue="string" TItem="Suggestion" PopupHeight="350px" PopupWidth="350px" Placeholder="Search by productcategory, productname or postcode" 
                DataSource="@LocalData" @bind-Value="@valueComboBox" @onkeypress="@(e => KeyUp(e))">
        <ComboBoxFieldSettings Text="Text"></ComboBoxFieldSettings>
    </SfComboBox>

    @code { //TODO Flyttes
        public class Suggestion
        {
            public string Text { get; set; }
        }
    }

    <div class="content">
        @Body
    </div>
    <div class="footer">

    </div>
</div>




@code{
    bool hidden = false;
    string value = "";
    string valueComboBox = "";
    User user;

    // For dropdown
    public List<string> suggestionList = null;
    private List<string> productCategories;
    private IList<Listing> listings;
    private List<string> productNames;
    private List<string> postCodes;
    List<Suggestion> LocalData = new List<Suggestion>();

    protected override async Task OnParametersSetAsync()
    {
        listings = ((SearchQuery)SocketService.Search(null)).Listings; // Get listings

        suggestionList = SocketService.GetProductCategories() //Get productcategories
    .Concat(listings.Select(l => l.Product.Name)) //Add productnames
    .Concat(listings.Select(l => l.Postcode)) // Add postcodes
    .Distinct() //Remove duplicates
    .ToList();

        LocalData = new List<Suggestion>();

        foreach (string s in suggestionList)
        {
            Suggestion sg = new Suggestion();
            sg.Text = s;
            LocalData.Add(sg);
        }


        if (user == null)
        {
            user = ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser();
        }
        //Console.WriteLine(user.ToString());
        if (NavigationManager.Uri.Split('/').ToList<string>()[3].Equals("listing"))
        {
            hidden = true;
        }
        else
        {
            hidden = false;
        }
    }

    public void search()
    {
        if (valueComboBox == null && value.Length > 0)
        {
            value = UppercaseFirst(value.Trim());
            NavigationManager.NavigateTo("/find/" + value);
        }

        if(valueComboBox != null && value.Length == 0)
        {
            valueComboBox = UppercaseFirst(valueComboBox.Trim());
            NavigationManager.NavigateTo("/find/" + valueComboBox);
        }
    }

    void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            search();
        }
    }

    public void login()
    {
        NavigationManager.NavigateTo("/Login");
    }
    public void logout()
    {
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
    }

    static string UppercaseFirst(string s)
    {
        // Check for empty string.
        if (string.IsNullOrEmpty(s))
        {
            return string.Empty;
        }
        // Return char and concat substring.
        return char.ToUpper(s[0]) + s.Substring(1);
    }
}
