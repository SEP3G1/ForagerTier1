@inherits LayoutComponentBase
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@using System.Windows.Input
@using Syncfusion.Blazor.DropDowns;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISocketService SocketService
@inject IUserService UserService
@inject IRefreshService RefreshService


<div class="main">
    <div id="headNav" class="@(hidden ? "hidden" : "")">


        <!-- "HTML Datalist søgebar" -->
        <div id="sticky" class="searchCont ">
            <svg class="searchIcon" @onclick="@search" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                 viewBox="0 0 373.12 373.12" style="enable-background:new 0 0 373.12 373.12;" xml:space="preserve">
            <g>
            <g>
            <path d="M266.667,234.667h-16.96l-5.867-5.867c20.907-24.213,33.493-55.68,33.493-90.133C277.333,62.08,215.253,0,138.667,0
                         S0,62.08,0,138.667s62.08,138.667,138.667,138.667c34.453,0,65.92-12.587,90.133-33.387l5.867,5.867v16.853L341.333,373.12
                         l31.787-31.787L266.667,234.667z M138.667,234.667c-53.013,0-96-42.987-96-96c0-53.013,42.987-96,96-96c53.013,0,96,42.987,96,96
                         C234.667,191.68,191.68,234.667,138.667,234.667z" />
                 </g>
             </g>
         </svg>
            <SfComboBox TValue="string" TItem="Suggestion" CssClass="searchIndex" Placeholder="Search..." 
                        DataSource="@DataForComboBox" @bind-Value="@valueComboBox" 
                        @onkeypress="@(e => KeyUp(e))" 
                        @onselect="@(e => search())"
                        @onclick="@(e => onClick())"
                        Autofill="true" AllowFiltering="true">
                <ComboBoxTemplates TItem="Suggestion">
                    <ItemTemplate>
                        <div>
                            <img class="suggestionImage" src="@((context as Suggestion).Image)" />
                            <div class="suggestionText"> @((context as Suggestion).Text) </div>
                        </div>
                    </ItemTemplate>
                </ComboBoxTemplates>
                <ComboBoxFieldSettings Text="Text"></ComboBoxFieldSettings>
            </SfComboBox>
        </div>


        <div id="header" class="headCont">
            <AuthorizeView Context="Auth">
                <Authorized>
                    @if (GetUser() != null)
                    {
                        <RadzenMenu>
                            <RadzenMenuItem Text="@GetUser().Name" Icon="account_box" @onselect="@(e => CallRequestRefresh())">
                                <RadzenMenuItem Text="Profile" Path="profile" Icon="perm_identity"></RadzenMenuItem>
                                <RadzenMenuItem Text="Your company" Path="@GetCompanyAddress()" Icon="home"></RadzenMenuItem>
                                <AuthorizeView Policy="Moderator">
                                    <RadzenMenuItem Text="Add Company" Path="addcompany" Icon="domain"></RadzenMenuItem>
                                    <RadzenMenuItem Text="Moderate" Path="moderatelistings" Icon="build"></RadzenMenuItem>
                                </AuthorizeView>
                            </RadzenMenuItem>
                        </RadzenMenu>
                    }
                    <a class="login" @onclick="@logout">Logout</a>
                </Authorized>
            </AuthorizeView>
            <button class="navButton"><a href="find">buy</a></button>
            <a href="/"><div class="logo">forager<span>.</span></div></a>
            <button class="navButton"><a href="sell">sell</a></button>
            <AuthorizeView>
                <NotAuthorized>
                    <a class="login" @onclick="@login">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <!-- "Syncfusion søgebar" -->
    <div class="content">

        <!-- For LazyLoad-->
        <CascadingValue Value=@LazyLoadEvent Name="LazyLoadEventName">
            <CascadingValue Value=@BeginNewSequenceEvent Name="BeginNewSequenceEventName">
            @Body
        </CascadingValue>
        </CascadingValue>
    </div>
    <div class="footer">

        <a href="/"><div class="logo">forager<span>.</span></div></a>

        <div class="git"><a href="https://github.com/SEP3G1"><img src="/css/images/github.png" /><span>SEP3G1</span></a></div>
    </div>
    </div>




    @code{
        bool hidden = false;
        string valueComboBox = "";
        string latestSearchTerm = "";

        //For LazyLoad
        [Parameter]
        public int SequenceNumber { get; set; }
        public int lazyLoadSequenceValue = 9; //hardcode #patrick

        User user;

        // For ComboBox dropdown
        private IList<Listing> listings;
        public Dictionary<string, string> suggestionListForComboBox;
        List<Suggestion> DataForComboBox;

        // https://stackoverflow.com/questions/58123063/call-method-in-mainlayout-from-a-page-component-in-blazor
        //To make sure you only create this object once, you can use the following:
        EventCallback _lazyLoadEvent = EventCallback.Empty;
        EventCallback LazyLoadEvent
        {
            get
            {
                if (_lazyLoadEvent.Equals(EventCallback.Empty))
                    _lazyLoadEvent = EventCallback.Factory.Create(this, GetNextSequence);
                return _lazyLoadEvent;
            }
        }

        EventCallback _beginNewSequenceEvent = EventCallback.Empty;
        EventCallback BeginNewSequenceEvent
        {
            get
            {
                if (_beginNewSequenceEvent.Equals(EventCallback.Empty))
                    _beginNewSequenceEvent = EventCallback.Factory.Create(this, BeginNewSequence);
                return _beginNewSequenceEvent;
            }
        }

        protected override async Task OnParametersSetAsync()
        {
            if (user == null)
            {
                user = GetUser();
            }
            //Console.WriteLine(user.ToString());
            if (NavigationManager.Uri.Split('/').ToList<string>()[3].Equals("listing"))
            {
                hidden = true;
            }
            else
            {
                hidden = false;
            }
            valueComboBox = null;
        }
        private User GetUser()
        {
            return ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser();
        }
        protected override async Task OnInitializedAsync()
        {
            //Henter opdateret data én gang for hver initialisering. Giver bedre brugeroplevelse (pga. loadtid), men betyder at data ikke opdateres hver gang man søger. 
            //Evt lav en timer til at opdatere ComboBoxData med et interval. #patrick
            setComboBoxData();
        }
        public String GetCompanyAddress()
        {
            return "company/" + GetUser().CompanyId;
        }

        public void GetNextSequence()
        {
            SequenceNumber += lazyLoadSequenceValue;
            NavigationManager.NavigateTo("/find/" + latestSearchTerm + "/" + SequenceNumber);
        }

        public void BeginNewSequence()
        {
            SequenceNumber = 0;
            NavigationManager.NavigateTo("/find/" + latestSearchTerm + "/" + SequenceNumber);
        }

        public void CallRequestRefresh()
        {
            RefreshService.CallRequestRefresh();
        }

        public void onClick()
        {

            valueComboBox = "";
            NavigationManager.NavigateTo("/");
        }

        Dictionary<string, string> productDictionary = new Dictionary<string, string>();
        private List<string> listingPostCodes = new List<string>();

        public void setComboBoxData()
        {
            productDictionary = SocketService.GetListingNamesAndCover(); // burde man ikke gå via en ListingService her? ... parker evt implementering til efter næste merge #patrick
            listingPostCodes = SocketService.GetListingPostCodes(); // burde man ikke gå via en ListingService her? ... parker evt implementering til efter næste merge #patrick

            suggestionListForComboBox = new Dictionary<string, string>();
            DataForComboBox = new List<Suggestion>();

            SocketService.GetProductCategories().ForEach(p
            => suggestionListForComboBox.Add(p, "https://foodion.net/images/app/foodion_logo_square.png"));

            productDictionary.ToList().ForEach(p => suggestionListForComboBox.Add(p.Key, p.Value));

            listingPostCodes.ForEach(p
            => suggestionListForComboBox.Add(p, "https://img.icons8.com/ios/452/zip-code.png"));

            suggestionListForComboBox.ToList().ForEach(s
            => DataForComboBox.Add(new Suggestion() { Text = s.Key, Image = s.Value }));
        }

        public void search()
        {
            if (valueComboBox == null) { return;  }

            if (suggestionListForComboBox.Keys.Contains(valueComboBox))
            {
                SequenceNumber = 0;
                RefreshService.CallRequestRefresh();

                valueComboBox = UppercaseFirst(valueComboBox.Trim());
                latestSearchTerm = valueComboBox;
                NavigationManager.NavigateTo("/find/" + valueComboBox + "/" + SequenceNumber);
            }

        }

        void KeyUp(KeyboardEventArgs e)
        {
            if (e.Key == "Enter")
            {
                search();
            }
        }

        public void login()
        {
            NavigationManager.NavigateTo("/Login");
        }
        public void logout()
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
        }

        static string UppercaseFirst(string s)
        {
            // Check for empty string.
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            // Return char and concat substring.
            return char.ToUpper(s[0]) + s.Substring(1);
        }

        public class Suggestion
        {
            public string Text { get; set; }
            public string Image { get; set; }
        }
    }

