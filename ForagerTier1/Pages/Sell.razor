@page "/sell"
@inject ISocketService SocketService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using ForagerTier1.Models
@using ForagerTier1.Persistance

<AuthorizeView>
    <NotAuthorized>
        <Login />
    </NotAuthorized>
    <Authorized>
        <div>
            <EditForm class="sellCont" Context="Listing" Model="@newListing" OnValidSubmit="AddNewListing">
                <h1>Create a listing<span class="acc">.</span></h1>
                <h3>Search through the products to find exactly what you want to sell. Then specify the quantity and total price for the listing. Upload up to 8 photos of your product. Remember, good photos drasticly reduces the time it takes to sell your product! <br /> Under 'Best Before' you can press the calender to easily find the expiration date. Anything else to add? Leave it in the comment</h3>
                <div class="sellColum">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <p>Category</p>
                        <RadzenDropDown AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@productCategories @bind-Value=@newProductCategory
                                        Change=@((arg) => updateCategory(arg)) required />
                    </div>
                    <div class="form-group">
                        <p>Product</p>
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@productsToShow @bind-Value=@newListing.ProductId
                                        TextProperty="Name" ValueProperty="ProductId" Change=@((arg) => updateProduct(arg)) />
                    </div>
                    <div class="form-group">
                        <p>Quantity</p>
                        <div style="display: flex;">
                            <InputNumber @bind-Value="newListing.Quantity" @bind-Value:format="F2" style="width: 14rem;" />
                            <select @bind=@newListing.Unit style="width:5rem">
                                <option value="kg" selected>kg</option>
                                <option value="g">g</option>
                                <option value="l">L</option>
                                <option value="ml">ml</option>
                                <option value="pcs">pcs.</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <p>Price</p>
                        <InputNumber @bind-Value="newListing.Price" @bind-Value:format="F2" />
                    </div>

                    <div class="form-group">
                        <p>Images</p>
                        <p>
                            <InputFile OnChange="@OnInputFileChange" multiple />
                        </p>

                        @if (imageDataUrls.Count > 0)
                        {
                            <h4>Images</h4>

                            <div class="card" style="width:30rem;">
                                <div class="card-body">
                                    @foreach (var imageDataUrl in imageDataUrls)
                                    {
                                        <img class="rounded m-1" src="@imageDataUrl" />
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="sellColum">
                    <div class="form-group">
                        <p>Best Before:</p>
                        <RadzenDatePicker @bind-Value=@date DateFormat="d" Change=@(args => changeDate(args)) Style="width:20rem;" />
                    </div>

                    <div class="form-group">
                        <p>Address</p>
                        <InputText @bind-Value="newListing.PickupAddress" />
                    </div>

                    <div class="form-group">
                        <p>Postcode</p>
                        <InputText @bind-Value="newListing.Postcode" />
                    </div>


                    <div class="form-group">
                        <RadzenCheckBox id="CheckBox1" @bind-Value=@newListing.HasDelivery TValue="bool" /> Has delivery
                    </div>


                    <div class="form-group">
                        <p>Comment</p>
                        <InputTextArea rows="2" @bind-Value="newListing.Comment" style="width:20rem" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Submit</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private string newProductCategory = "";
    private List<Product> products;
    private List<Product> productsToShow;
    private List<string> DeliveryOptions = new List<string>() { "true", "false" };
    private List<string> productCategories;
    private Listing newListing = new Listing();
    private DateTime date = DateTime.Now;

    IList<string> imageDataUrls = new List<string>();
    IList<IBrowserFile> images = new List<IBrowserFile>();
    string urlString;

    protected override async Task OnParametersSetAsync()
    {
        products = SocketService.GetProducts();
        productsToShow = new List<Product>(products);
        productCategories = SocketService.GetProductCategories();
    }

    public void AddNewListing()
    {
        TrySubmit();
        newListing.UserId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).UserId;
        string id = SocketService.CreateListing(newListing);

        NavigationManager.NavigateTo("/listing/" + id);
    }

    public void updateCategory(object e)
    {
        productsToShow.Clear();
        foreach (Product p in products)
        {
            if (p.ProductCategory.Equals(newProductCategory))
                productsToShow.Add(p);
        }
    }
    public void updateProduct(object e)
    {
        if (newProductCategory.Equals(""))
        {
            if(newListing.ProductId != 0)
                newProductCategory = products.First(p => p.ProductId == newListing.ProductId).ProductCategory;
        }
    }
    public void TrySubmit()
    {
        newListing.Product.ProductCategory = newProductCategory;
        newListing.StartDate = DateTime.Now.Ticks + "";
    }

    public void changeDate(object e)
    {
        newListing.BestBefore = ((DateTime)e).Ticks + "";
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 8;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,800,800);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
            images.Add(imageFile);
        }
    }
}