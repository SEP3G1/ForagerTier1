@page "/listing"
@page "/listing/{id}"
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@inject IJSRuntime JSRuntime;
@inject ISocketService SocketService
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject ICompanyService CompanyService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div id="listingContainer">
    <div class="listingContainerImage" style="background-image: url(@imageInView);">
        @if (listing.getPictures().Count > 1)
        {
            <div class="listingContainerImageThumbContainer">
                @foreach (string img in listing.getPictures())
                {
                    <div class="listingContainerImageThumb" style="background-image: url(@img);" @onclick="@(e => imageInView = img)"></div>
                }
            </div>
        }
    </div>
    <div class="listingInfoContainer">
        <div class="breadcrumbs"><a href="../find/@listing.Product.ProductCategory">@listing.Product.ProductCategory</a> > <a href="../find/@listing.Product.Name">@listing.Product.Name</a> ></div>
        <h2>@listing.Product.Name</h2>
        <div class="listingInfoTabel">
            <div class="listingInfoTabelItem">
                <p>Best before</p>
                <h3>@listing.getDate()</h3>
                <p>Quantity</p>
                <h2>@listing.Quantity <span class="unit">@listing.Unit</span></h2>
                <p>Comment</p>
                <div class="comment">
                    @listing.Comment
                </div>
            </div>
            <div class="listingInfoTabelItem">
                @if (myListing)
                {
                    <input type="button" class="edit" value="Edit listing" @onclick="Edit" />
                }
                @if (canIModerate)
                {
                    <input type="button" class="delete" value="Delete listing" @onclick="Delete" />
                }
                <p>Seller</p>
                <h3>@Company.Name</h3>
                <p>Address</p>
                <h3>@listing.PickupAddress, @listing.Postcode</h3>
                @if (listing.HasDelivery)
                {
                    <div class="breadcrumbs">Has delevery</div>
                }
                else
                {
                    <div class="breadcrumbs">Pickup only</div>
                }
                @if (!myListing)
                {
                    <p style="margin-top: 2rem;">Contact</p>
                    <AuthorizeView>
                        <Authorized>
                            <textarea class="messageInput" @bind="message"></textarea>
                            <input type="button" class="sendMessage" @onclick="SendMessage" value="Send message to @Company.Name" />
                        </Authorized>
                        <NotAuthorized>
                            <h3>Login to contact seller</h3>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </div>
        </div>

        <div class="priceListing">
            <h2>$ @listing.Price</h2>
            <p>pr. @listing.Unit</p>
            <p>$ @listing.pricePrUnit()</p>
        </div>
        <div>
            <input type="button" style="text-decoration-color:red" @onclick="Report" value="report listing" />
        </div>
    </div>
</div>

<h1 class="related">Related</h1>
<div class="relatedCont">
    @foreach (Listing Listing in RecommendedListings)
    {
        <div class="listing @(Listing.HasDelivery ? "Delivery" : "")" @onclick="@(e => openListing(@Listing.ListingId))">
            <div class="listingImage" style="background-image: url(@Listing.getCover());"></div>
            <p class="type">@Listing.Product.Name</p>
            <table>
                <tr>
                    <td>
                        <p class="attr">Price:</p>
                        <p class="price">@Listing.Price</p>
                    </td>
                    <td>
                        <p class="attr">Quantity:</p>
                        <p class="weight">@Listing.Quantity @Listing.Unit</p>
                    </td>
                </tr>
            </table>
            <p class="attr">Best before:</p><br />
            <p class="bestBy">@Listing.getDate()</p>

        </div>
    }
</div>
@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    Listing listing;
    Company Company = new Company();
    List<Listing> RecommendedListings = new List<Listing>();
    string imageInView = "";
    string message = "";
    string _authMessage = "";
    int fromCompanyId = -1;
    bool myListing = false;
    bool canIModerate = false;

    protected override async Task OnParametersSetAsync()
    {
        listing = (Listing)SocketService.GetListing(id);
        if (listing == null)
            NavigationManager.NavigateTo($"/");
        imageInView = listing.getCover();
        await JSRuntime.InvokeVoidAsync("setTitle", "forager. | " + listing.Product.Name);
        RecommendedListings = (List<Listing>)SocketService.Search(listing.Product.ProductCategory).Listings;
        Company = CompanyService.GetCompanyFromUserId(listing.UserId);
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            fromCompanyId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).CompanyId;
            myListing = fromCompanyId == Company.CompanyId;
            if (((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).SecurityLevel >= 3)
                canIModerate = true;
        }
    }

    private void SendMessage()
    {
        if (!message.Equals(""))
            SocketService.SendMessage(message, listing.UserId, fromCompanyId);
    }
    public void openListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }
    public void Edit()
    {
        NavigationManager.NavigateTo($"/sell/{id}");
    }

    public void Delete()
    {
        NavigationManager.NavigateTo($"/");
        // Listing slettes med success, dog dør blazor siden. Dette sker formentlig fordi at den ikke redirecter til index korrekt. Der bliver i hvert
        // fald efter sletningen kørt følgende metode på Tier3. public async Task<Listing> GetListing(string id) i ListingService.
        SocketService.DeleteListing(listing.ListingId);
    }

    public void Report()
    {
        Report report = new Report();
        report.ListingId = listing.ListingId;
        report.UserId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).UserId;
        report.ReportType = "TestReport";
        report.Time = DateTime.Now.Ticks + "";
        string message = SocketService.ReportListing(report);
        Console.WriteLine("Report id: " + message);
    }
}
