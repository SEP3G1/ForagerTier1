@page "/listing"
@page "/listing/{id}"
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@using System.Net 
@inject IJSRuntime JSRuntime
@inject ISocketService SocketService
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject ICompanyService CompanyService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (listing.IsArchived)
{   
    <div class="isArchived">
        This listing is no longer for sale
    </div>
}
<div id="listingContainer">
    <div class="listingContainerImage" style="background-image: url(@imageInView);">
        @if (listing.getPictures().Count > 1)
        {
            <div class="listingContainerImageThumbContainer">
                @foreach (string img in listing.getPictures())
                {
                    <div class="listingContainerImageThumb" style="background-image: url(@img);" @onclick="@(e => imageInView = img)"></div>
                }
            </div>
        }
    </div>
    <div class="listingInfoContainer">
        <div class="breadcrumbs"><a href="../find/@listing.Product.ProductCategory">@listing.Product.ProductCategory</a> > <a href="../find/@listing.Product.Name">@listing.Product.Name</a> ></div>
        <h2>
            @listing.Product.Name
                @if (myListing || canIModerate)
                {
                    <div class="views">@listing.NumberOfViews</div>
                }
        </h2>
        <div class="listingInfoTabel">
            <div class="listingInfoTabelItem">
                <p>Best before</p>
                <h3>@listing.getDate()</h3>
                <p>Quantity</p>
                <h2>@listing.Quantity <span class="unit">@listing.Unit</span></h2>
                <p>Comment</p>
                <div class="comment">
                    @listing.Comment
                </div>

                <div class="priceListing">
                    <h2>$ @listing.Price</h2>
                    <p>pr. @listing.Unit</p>
                    <p>$ @listing.pricePrUnit()</p>
                </div>
                @if (!myListing || !listing.IsArchived)
                {
                    <div class="form-group">
                        <p class="report" @onclick="toggleReportListing">Report listing</p>
                        @if (reportListing)
                        {

                            <select class="reportSelect" @bind=@reportReason style="width:15rem">
                                <option value="Illegal goods" selected>Illegal goods</option>
                                <option value="Breaking the law">Breaking the law</option>
                                <option value="Offensive picture">Offensive picture</option>
                                <option value="Offensive description">Offensive description</option>
                            </select>
                            @if (reportReason != "")
                            {
                                <input type="button" class="reportButton" style="text-decoration-color:red" @onclick="Report" value="report" />
                            }
                        }
                    </div>
                }
            </div>
            <div class="listingInfoTabelItem">
                @if (myListing || canIModerate)
                {
                    <input type="button" class="edit" value="Edit listing" @onclick="Edit" />
                    <input type="button" class="delete" value="Archive listing" @onclick="Delete" />
                }
                <p>Seller</p>
                @if (!listing.IsArchived)
                {<h3><a href="/company/@listing.CompanyId">@Company.Name</a></h3>}
                else
                {
                 <h3>@Company.Name</h3>
                }
                <p>Address</p>
                <h3>@listing.PickupAddress, @listing.Postcode</h3>
                @if (listing.HasDelivery)
                {
                    <div class="breadcrumbs">Has delivery</div>
                }
                else
                {
                    <div class="breadcrumbs">Pickup only</div>
                }

                <br />
                @if (!listing.IsArchived)
                {
                    <AuthorizeView>
                        <Authorized>
                            <h3>Contact: </h3>
                            <RadzenTabs style="height: 20rem">
                                <Tabs>
                                    @if (myListing)
                                    {
                                        @if (Conversation.Count > 0)
                                        {
                                            @foreach (Company c in Conversations)
                                            {
                                                <RadzenTabsItem Text="@c.Name">

                                                    <div class="conversation">
                                                        @foreach (Message m in GetConversations(c.Name))
                                                        {
                                                            <p class="chatMessage @(m.fromCompany.Name.Equals(c.Name) ? "recieved" : "")">@m.message</p>
                                                        }
                                                    </div>
                                                    <textarea class="messageInput" @bind="message"></textarea>
                                                    <input type="button" class="sendMessage" @onclick="@(() => Respond(GetConversations(c.Name)[GetConversations(c.Name).Count - 1]))" value="Send" />

                                                    <a @onclick="UpdateConversations">&#x27F3; Update</a>
                                                </RadzenTabsItem>
                                            }
                                        }
                                        else
                                        {
                                            <RadzenTabsItem Text="">
                                                <h3>
                                                    No messages yet...
                                                </h3>
                                            </RadzenTabsItem>
                                        }
                                    }
                                    else
                                    {
                                        <RadzenTabsItem Text="@Company.Name">
                                            <div class="conversation">
                                                @foreach (Message m in GetConversations(Company.Name))
                                                {
                                                    <p class="chatMessage @(m.fromCompany.Name.Equals(Company.Name) ? "recieved" : "")">@m.message</p>
                                                }
                                            </div>
                                            <textarea class="messageInput" @bind="message"></textarea>
                                            <input type="button" class="sendMessage" @onclick="@(() => SendMessage(listing.UserId, fromCompanyId))" value="Send" />

                                            <a @onclick="UpdateConversations">&#x27F3; Update</a>
                                        </RadzenTabsItem>
                                    }
                                </Tabs>
                            </RadzenTabs>
                        </Authorized>
                        <NotAuthorized>
                            <p>Contact: </p>
                            <h3>Login to contact seller</h3>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </div>
        </div>
    </div>
</div>

<h1 class="related">Related</h1>
<div class="relatedCont">
    @foreach (Listing Listing in RecommendedListings)
    {
        <div class="listing @(Listing.HasDelivery ? "Delivery" : "")" @onclick="@(e => openListing(@Listing.ListingId))">
            <div class="listingImage  @(Listing.CompanyId == fromCompanyId?"MyListing":"")" style="background-image: url(@Listing.getCover());"></div>
            <p class="type">@Listing.Product.Name</p>
            <table>
                <tr>
                    <td>
                        <p class="attr">Price:</p>
                        <p class="price">@Listing.Price</p>
                    </td>
                    <td>
                        <p class="attr">Quantity:</p>
                        <p class="weight">@Listing.Quantity @Listing.Unit</p>
                    </td>
                </tr>
            </table>
            <p class="attr">Best before:</p><br />
            <p class="bestBy">@Listing.getDate()</p>

        </div>
    }
</div>
@code {
    [Parameter]
    public string id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    Listing listing;
    Company Company = new Company();
    List<Listing> RecommendedListings = new List<Listing>();
    List<Message> Conversation = new List<Message>();
    List<Company> Conversations = new List<Company>();

    string imageInView = "";
    string message = "";
    string _authMessage = "";
    string reportReason = "";
    int fromCompanyId = -1;
    bool myListing = false;
    bool canIModerate = false;
    bool reportListing = false;


    protected override async Task OnParametersSetAsync()
    {
        listing = (Listing)SocketService.GetListing(id);
        if (listing == null)
            NavigationManager.NavigateTo($"/");
        imageInView = listing.getCover();
        if (listing.Comment != null)
            listing.Comment = WebUtility.HtmlDecode(listing.Comment).Replace("+", " ");
        listing.PickupAddress = WebUtility.HtmlDecode(listing.PickupAddress).Replace("+", " ");
        await JSRuntime.InvokeVoidAsync("setTitle", "forager. | " + listing.Product.Name);
        RecommendedListings = (List<Listing>)SocketService.LazyFilterSearch(listing.Product.ProductCategory, "", 0, 15).Listings;
        Company = CompanyService.GetCompanyFromUserId(listing.UserId);
        if (Company == null)
        {
            Company = new Company();
            Company.Name = "Company No Longer Exist";
        }
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            fromCompanyId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).CompanyId;
            if (Company != null)
                myListing = fromCompanyId == Company.CompanyId;
            UpdateConversations();
            if ((((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).SecurityLevel >= 3) && (!listing.IsArchived))
                canIModerate = true;
        }
    }
    public void Delete()
    {
        listing.IsArchived = true;
        SocketService.UpdateListing(listing);
    }

    public void toggleReportListing()
    {
        if (reportListing)
            reportListing = false;
        else
            reportListing = true;
    }

    private void SendMessage(int toUserId, int fromCompanyId)
    {
        if (!message.Equals(""))
        {
            Conversation = new List<Message>();
            Conversation = SocketService.SendMessage(message, toUserId, fromCompanyId, listing.ListingId);
            message = "";
        }
    }

    private void UpdateConversations()
    {
        Conversation = new List<Message>();
        Conversation = SocketService.GetConversation(listing.ListingId);
        GetConversations();
    }

    private void Respond(Message m)
    {
        if (!message.Equals(""))
        {
            Conversation.Clear();
            Conversation = SocketService.Respond(message, m);
            message = "";
        }
    }

    public void openListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }
    public void Edit()
    {
        NavigationManager.NavigateTo($"/sell/{id}");
    }
    private List<Message> GetConversations(string CompanyName)
    {
        List<Message> C = new List<Message>();

        foreach (Message m in Conversation)
        {
            if (m.fromCompany.Name.Equals(CompanyName) || m.toCompany.Name.Equals(CompanyName))
                C.Add(m);
        }
        return C;
    }
    private void GetConversations()
    {
        Conversations = new List<Company>();
        foreach (Message message in Conversation)
        {
            Boolean seen = false;
            if (message.fromCompany.CompanyId == fromCompanyId)
                continue;

            foreach(Company company in Conversations)
            {
                if (message.fromCompany.Name.Equals(company.Name))
                {
                    seen = true;
                    break;
                }
            }

            if (!seen)
                Conversations.Add(message.fromCompany);
        }
    }

    public void Report()
    {
        int userId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).UserId;
        string isUserAllowedToReport = SocketService.IsUserAllowedToReport(userId);

        if(isUserAllowedToReport == "true" )
        {
            Report report = new Report();
            report.ListingId = listing.ListingId;
            report.UserId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).UserId;
            report.ReportType = reportReason;
            report.Time = DateTime.Now.Ticks + "";
            SocketService.ReportListing(report);
        } else
        {
            JSRuntime.InvokeVoidAsync("alert", "Too many reportings. Please wait before trying again");
        }
    }
}
