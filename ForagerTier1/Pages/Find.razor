@page "/find"
@page "/find/{search}"
@page "/find/{search}/{sequenceNumber:int}"
@using ForagerTier1.Models
@inject ISocketService SocketService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@inject IRefreshService RefreshService
@implements IDisposable
<div class="page">
    <table class="searchMenu">
        <tr>
            <td>
                <h2>@SearchQuery.Query</h2>
                <p>Showing @SearchQuery.Listings.Count of @SearchQuery.Results:</p>
            </td>
            <td>
                <div>
                    <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                    Placeholder="Filter" 
                                    Data=@filterOptions TextProperty="TextProperty" ValueProperty="ValueProperty" 
                                    Change=@(args => FilterResults(args)) />
                </div>
                <button class="listButton @(grid?"":"active")" @onclick="displayList"></button>
                <button class="gridButton @(grid?"active":"")" @onclick="displayGrid"></button>
            </td>
        </tr>
    </table>
    <div class="queryContainer">
        @foreach (Listing Listing in SearchQuery.Listings)
        {
            <div class="@(grid?"":"list") listing @(Listing.HasDelivery ? "Delivery" : "")" @onclick="@(e => openListing(@Listing.ListingId))">
                <div class="listingImage" style="background-image: url(@Listing.getCover());"></div>
                <p class="type">@Listing.Product.Name</p>
                <table>
                    <tr>
                        <td>
                            <p class="attr">Price:</p>
                            <p class="price">@Listing.Price</p>
                        </td>
                        <td>
                            <p class="attr">Quantity:</p>
                            <p class="weight">@Listing.Quantity @Listing.Unit</p>
                        </td>
                        @if (!grid)
                        {
                            <td class="bestByHeight">
                                <p class="attr">Best before:</p><br />
                                <p class="bestBy">@Listing.getDate()</p>
                            </td>
                        }
                    </tr>
                </table>

                @if (grid)
                {
                    <p class="attr">Best before:</p><br />
                    <p class="bestBy">@Listing.getDate()</p>
                }

            </div>
        }
        <button @onclick="@Test">Load more Listings</button>
    </div>
</div>

@code {
    [Parameter]
    public string search { get; init; }

    [Parameter]
    public int sequenceNumber { get; set; }

    [CascadingParameter]
    public EventCallback LazyLoadEvent { get; set; }

    IEnumerable<FilterOption> filterOptions = new List<FilterOption>() {
    new FilterOption{TextProperty = "Price - low to high", ValueProperty = "priceAscending"},
    new FilterOption{TextProperty = "Best before - low to high", ValueProperty = "bestBeforeAscending"},
    new FilterOption{TextProperty = "Best before - high to low", ValueProperty = "bestBeforeDecending"},
    new FilterOption{TextProperty = "Distance - low to high", ValueProperty = "distanceAscending"},
    };

    private void FilterResults(object value)
    {
        filter = value.ToString();
        Console.WriteLine("FilterResults(object value), filter: " + filter);
        sequenceNumber = 0;
        LazyFilterSearch();
    }

    public class FilterOption
    {
        public string TextProperty { get; set; }
        public string ValueProperty { get; set; }
    }

    private void RefreshMe()
    {
        SearchQuery = null;
        sequenceNumber = 0;
        LazyFilterSearch();
    }

    public void Test()
    {
        sequenceNumber += 2; //hardcode issue #patrick //for at den kan søge inden sekvensnummer parametren bliver sat (i OnParametersSetAsync)
        LazyLoadEvent.InvokeAsync();
        LazyFilterSearch();
    }


    bool grid = true;
    SearchQuery SearchQuery;
    SearchQuery NewSearchQuery;
    public string filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RefreshService.RefreshRequested += RefreshMe;
        await LazyFilterSearch();
    }

    protected override async Task OnParametersSetAsync()
    {
        filter = "none";

        await JSRuntime.InvokeVoidAsync("setTitle", "forager. | " + search);
        //await JSRuntime.InvokeVoidAsync(user.ToString());
    }

    public async Task LazyFilterSearch()
    {

        if (SearchQuery == null)
        {
            SearchQuery = new SearchQuery();
        }

        NewSearchQuery = (SearchQuery)SocketService
                .LazyFilterSearch(search, filter, sequenceNumber);

        if (sequenceNumber > 0)
        {
            foreach (Listing listing in NewSearchQuery.Listings)
            {
                SearchQuery.Listings.Add(listing);
            }
        }
        else
        {
            SearchQuery = NewSearchQuery;
        }
    }

    public async void Filter()
    {
        sequenceNumber = 0;
        await LazyFilterSearch();
    }

    public void displayGrid()
    {
        grid = true;
    }
    public void displayList()
    {
        grid = false;
    }
    public void openListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }

    public void Dispose()
    {
        RefreshService.RefreshRequested -= RefreshMe;
    }

}
