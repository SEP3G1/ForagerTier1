@page "/find"
@page "/find/{search}"
@page "/find/{search}/{sequenceNumber:int}"
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@inject ISocketService SocketService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRefreshService RefreshService
@inject ICompanyService CompanyService
@implements IDisposable
<div class="page">
    <table class="searchMenu">
        <tr>
            <td>
                <h2>@SearchQuery.Query</h2>
                <p>Showing @SearchQuery.Listings.Count of @numberOfResults:</p>
            </td>
            <td class="filter">
                <RadzenDropDown AllowClear="true" TValue="string"
                                Placeholder="Filter"
                                Data=@filterOptions TextProperty="TextProperty" ValueProperty="ValueProperty"
                                Change=@(args => FilterResults(args)) />
            </td>
            <td>
                <button class="listButton @(grid?"":"active")" @onclick="displayList"></button>
                <button class="gridButton @(grid?"active":"")" @onclick="displayGrid"></button>
            </td>
        </tr>
    </table>
    <div class="queryContainer">
        @foreach (Listing Listing in SearchQuery.Listings)
        {
            <div class="@(grid?"":"list") listing @(Listing.HasDelivery ? "Delivery" : "")" @onclick="@(e => openListing(@Listing.ListingId))">
                <div class="listingImage  @(Listing.CompanyId == CompanyId?"MyListing":"")" style="background-image: url(@Listing.getCover());"></div>
                <p class="type">@Listing.Product.Name</p>
                <table>
                    <tr>
                        <td>
                            <p class="attr">Price:</p>
                            <p class="price">@Listing.Price</p>
                        </td>
                        <td>
                            <p class="attr">Quantity:</p>
                            <p class="weight">@Listing.Quantity @Listing.Unit</p>
                        </td>
                        @if (!grid)
                        {
                            <td class="bestByHeight">
                                <p class="attr">Best before:</p><br />
                                <p class="bestBy">@Listing.getDate()</p>
                            </td>
                        }
                    </tr>
                </table>

                @if (grid)
                {
                    <p class="attr">Best before:</p><br />
                    <p class="bestBy">@Listing.getDate()</p>
                }

            </div>
        }
        <button hidden="@hideLoadMoreListingsButton" @onclick="@LoadMoreListings">Load more</button>
    </div>
</div>

@code {
    [Parameter]
    public string? Search { get; set; }

    [Parameter]
    public int? SequenceNumber { get; set; }

    public int lazyLoadSequenceValue = 9; //hardcode #patrick
    public int numberOfResults { get; set; }
    public bool hideLoadMoreListingsButton = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    int CompanyId = -1;

    [CascadingParameter(Name = "LazyLoadEventName")]
    public EventCallback LazyLoadEvent { get; set; }

    [CascadingParameter(Name = "BeginNewSequenceEventName")]
    public EventCallback BeginNewSequenceEvent { get; set; }

    IEnumerable<FilterOption> filterOptions = new List<FilterOption>() {
    new FilterOption{TextProperty = "Price - low to high", ValueProperty = "priceAscending"},
    new FilterOption{TextProperty = "Best before - low to high", ValueProperty = "bestBeforeAscending"},
    new FilterOption{TextProperty = "Best before - high to low", ValueProperty = "bestBeforeDecending"},
    };

    public void FilterResults(object value)
    {
        filter = value.ToString();
        SearchQuery = null;
        SequenceNumber = 0;
        LazyFilterSearch();
        BeginNewSequenceEvent.InvokeAsync();
        //LazyFilterSearch();
    }

    public class FilterOption
    {
        public string TextProperty { get; set; }
        public string ValueProperty { get; set; }
    }

    private void RefreshMe()
    {
        SearchQuery = null;
        SequenceNumber = 0;
        LazyFilterSearch();
    }

    public void LoadMoreListings()
    {
        SequenceNumber += lazyLoadSequenceValue;
        LazyLoadEvent.InvokeAsync();
        LazyFilterSearch();
    }


    bool grid = true;
    SearchQuery SearchQuery;
    SearchQuery NewSearchQuery;
    public string filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            CompanyId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).CompanyId;


        SequenceNumber = SequenceNumber ?? 0;
        RefreshService.RefreshRequested += RefreshMe;
        await LazyFilterSearch();
    }

    protected override async Task OnParametersSetAsync()
    {
        await JSRuntime.InvokeVoidAsync("setTitle", "forager. | " + Search);
        hideLoadMoreListingsButton = SearchQuery.Listings.Count >= numberOfResults;
        //await JSRuntime.InvokeVoidAsync(user.ToString());
    }

    public async Task LazyFilterSearch()
    {
        NewSearchQuery = (SearchQuery)SocketService.LazyFilterSearch(Search, filter, SequenceNumber.Value, lazyLoadSequenceValue);

        if (SequenceNumber > 0)
        {
            foreach (Listing listing in NewSearchQuery.Listings)
            {
                SearchQuery.Listings.Add(listing);
            }
        }
        else
        {
            SearchQuery = NewSearchQuery;
        }

        numberOfResults = SocketService.GetNumberOfResults(Search); // burde man ikke gå via en ListingService her? ... parker evt implementering til efter næste merge #patrick
    }

    public async void Filter()
    {
        SequenceNumber = 0;
        await LazyFilterSearch();
    }

    public void displayGrid()
    {
        grid = true;
    }
    public void displayList()
    {
        grid = false;
    }
    public void openListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }

    public void Dispose()
    {
        RefreshService.RefreshRequested -= RefreshMe;
    }

}
