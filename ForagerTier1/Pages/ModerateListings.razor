@page "/moderatelistings"
@using ForagerTier1.Models
@inject ISocketService socketService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "Moderator")]

<AuthorizeView>
    <NotAuthorized>
        <Login />
    </NotAuthorized>
    <Authorized>
        <div class="page">
            <div class="queryContainer">
                <table>
                    <tr>
                        <td>ListingId</td>
                        <td>Illegal goods</td>
                        <td>Breaking the law</td>
                        <td>Offensive picture</td>
                        <td>Offensive description</td>
                    </tr>
                    @foreach (Report report in reports)
                    {
                        <!--Count amounts of type, maybe do an object to handle this-->

                        <tr>
                            <td>
                                <p @onclick="@(() => OpenListing(@report.ListingId))">@report.ListingId</p>
                            </td>
                            <td>
                                <p>@report.ReportType</p>
                            </td>

                        </tr>

                    }
                </table>
            </div>
            <div class="queryContainer">
                <table>
                    <tr>
                        <td>Company Name</td>
                        <td>Delete company</td>
                    </tr>

                    @foreach (Company company in companies)
                    {
                    <tr>
                        <td>@company.Name</td>
                        <td>
                            <button @onclick="@(() => DeleteCompany(@company.CompanyId))">
                                <i class="oi oi-trash" style="color:#ff0000" />
                            </button>
                        </td>
                    </tr>
                    }
                </table>
            </div>
            </div>
</Authorized>
</AuthorizeView>

@code {
    List<Company> companies = new List<Company>();
    List<Report> reports = new List<Report>();
    List<Report> sortedReports = new List<Report>();

    protected override async Task OnParametersSetAsync()
    {
        reports = (List<Report>)socketService.GetAllReports();
        companies = (List<Company>)socketService.GetAllCompaniesToDelete();
        if (reports != null)
        {
            // Sort(reports);
        }
    }

    //    public void Sort(List<Report> reports)
    //    {
    //        int maxListingId = reports.Max(x => x.ListingId);
    //
    //        for (int i = 0; i < maxListingId; i++)
    //        {
    //
    //        }
    //    }

    public void OpenListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }

    public void DeleteCompany(int id)
    {
        socketService.DeleteCompany(id);
    }

}
