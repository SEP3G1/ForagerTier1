@page "/addCompany"
@page "/addCompany/{CompanyId}"
@inject IJSRuntime JSRuntime
@inject ISocketService SocketService
@inject IUserService UserService
@inject ICompanyService CompanyService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IRefreshService RefreshService
@implements IDisposable
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@using System.Net

<AuthorizeView Policy="VR">
    <NotAuthorized>
        <Login />
    </NotAuthorized>
    <Authorized Context="Auth">
        <div>
            <EditForm class="sellCont" Context="Company" Model="@newCompany" OnValidSubmit="AddNewCompany">
                @if (((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).SecurityLevel >= 3)
                {

                    <h1>Create a company<span class="acc">.</span></h1>
                    <h3 style="width: 100%;">Create a company in the form below</h3>
                    <h3 style="width: 100%; color:red;">@Errorlabel</h3>
                }
                else
                {
                    <h1>Edit @newCompany.Name<span class="acc">.</span></h1>
                    <h3 style="width: 100%;">Edit you company in the form below. Changes are first saved when the button is pressed</h3>
                    <h3 style="width: 100%; color:red;">@Errorlabel</h3>
                }
                <div class="sellColum">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <p>Cvr</p>
                        <InputText @bind-Value="newCompany.Cvr" />
                    </div>

                    <div class="form-group">
                        <p>Name</p>
                        <InputText @bind-Value="newCompany.Name" />
                    </div>

                    <div class="form-group">
                        <p>Address</p>
                        <InputText @bind-Value="newCompany.Address" />
                    </div>

                </div>
                <div class="sellColum">
                    <div class="form-group">
                        <p>Postcode</p>
                        <InputText @bind-Value="newCompany.PostCode" />
                    </div>
                    <div class="form-group">
                        <p>Ip Adress</p>
                        <InputText @bind-Value="newCompany.ConnectionAddress" />
                    </div>
                    @if (CompanyId == null)
                    {
                        <AuthorizeView Policy="Moderator">
                            <div class="form-group">
                                <button type="submit" class="btn btn-success">Submit</button>
                            </div>
                        </AuthorizeView>
                    }
                    else
                    {
                        <AuthorizeView Policy="VR">
                            <div class="form-group">
                                <button type="submit" class="btn btn-success">Save changes</button>
                            </div>
                        </AuthorizeView>
                    }
                </div>
            </EditForm>

            @if (CompanyId != null)
            {
                <EditForm class="sellCont" Context="User" Model="@newUser" OnValidSubmit="AddNewUser">
                    <h1>Create an account for your employee<span class="acc">.</span></h1>
                    <h3 style="width: 100%;">Fill in the information about your employee here</h3>
                    <div class="sellColum">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <p>Name</p>
                            <InputText @bind-Value="newUser.Name" />
                        </div>

                        <div class="form-group">
                            <p>Email</p>
                            <InputText @bind-Value="newUser.Email" />
                        </div>
                        <div class="form-group">
                            <p>Password</p>
                            <InputText @bind-Value="newUser.Password" />
                        </div>
                    </div>
                    <div class="sellColum">
                        @if (canIModerate)
                        {
                            <div class="form-group">
                                <p>Securitylevel</p>
                                <InputNumber @bind-Value="newUser.SecurityLevel" />
                            </div>
                            <div class="form-group">
                                <p>CompanyId</p>
                                <InputNumber @bind-Value="newUser.CompanyId" />
                            </div>
                        }
                        <div class="form-group">
                            <button type="Submit" class="btn btn-success">Create user</button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public string CompanyId { get; set; }
    public User newUser = new User();
    public Company newCompany = new Company();
    public string Errorlabel = "";
    public bool canIModerate = false;
    protected override async Task OnParametersSetAsync()
    {
        RefreshService.RefreshRequested += RefreshMe;
        Errorlabel = "";
        if (CompanyId is not null)
        {
            newCompany = CompanyService.GetCompany(CompanyId);
            newCompany.Name = WebUtility.HtmlDecode(newCompany.Name).Replace("+", " ");
            newCompany.Address = WebUtility.HtmlDecode(newCompany.Address).Replace("+", " ");
            newUser.CompanyId = int.Parse(CompanyId);
            newUser.SecurityLevel = 1;

            if ((((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).SecurityLevel >= 3))
                canIModerate = true;
        }
        else //CompanyId can be null because of the RefreshMe method
        {
            newCompany = new Company();
        }
    }

    public void AddNewCompany()
    {
        if (CompanyId == null)
        {
            newCompany.Name = WebUtility.HtmlEncode(newCompany.Name);
            newCompany.Address = WebUtility.HtmlEncode(newCompany.Address);
            string id = CompanyService.CreateCompany(newCompany);
            if (id.Equals("alreadyExists"))
                Errorlabel = "Company already exists";
            else
                NavigationManager.NavigateTo("/company/" + id);
        }
        else
            SaveChanges();
    }
    public void AddNewUser()
    {
        User users = new User();
        string Userid = UserService.CreateUser(newUser);
        JSRuntime.InvokeVoidAsync("alert", $"{newUser.Name} was successfully created.");
        NavigationManager.NavigateTo("/company/" + newUser.CompanyId);
    }

    public void SaveChanges()
    {
        newCompany.Name = WebUtility.HtmlEncode(newCompany.Name);
        newCompany.Address = WebUtility.HtmlEncode(newCompany.Address);
        CompanyService.UpdateCompany(newCompany);
        NavigationManager.NavigateTo("/company/" + CompanyId);
    }

    private void RefreshMe()
    {
        CompanyId = null;
    }

    public void Dispose()
    {
        RefreshService.RefreshRequested -= RefreshMe;
    }
}
        }

