@page "/company"
@page "/company/{id}"
@using ForagerTier1.Models
@using ForagerTier1.Persistance
@using System.Net 
@inject IJSRuntime JSRuntime
@inject ISocketService SocketService
@inject ICompanyService Companyservice
@inject NavigationManager NavigationManager


<div class="sellCont">
    <h1>@company.Name<span class="acc">.</span></h1>

    <div class="sellColum">
        <p>Cvr:</p>
        <h3>@company.Cvr</h3>
        <p>TrustScore:</p>
        <h3>@company.TrustScore</h3>
        <p>Number of votes:</p>
        <h3>@company.NumberOfVotes</h3>
    </div>
    <div class="sellColum">
        <p>Address:</p>
        <h3>@company.Address</h3>
        <p>Postcode:</p>
        <h3>@company.PostCode</h3>
        <p>ConnectionAddress:</p>
        <h3>@company.ConnectionAddress</h3>
    </div>
</div>
<div class="companyButtons">
    <AuthorizeView Policy="VR">
        <button type="submit" class="btn btn-warning" @onclick="@EditCompany">Edit</button>
        <button type="submit" class="btn btn-danger" @onclick="@Delete">Delete</button>
    </AuthorizeView>
</div>
<h1 class="related">Active listings from @company.Name</h1>
<div class="relatedCont">
    @foreach (Listing Listing in Listings)
    {
        <div class="listing @(Listing.HasDelivery ? "Delivery" : "")" @onclick="@(e => openListing(@Listing.ListingId))">
            <div class="listingImage" style="background-image: url(@Listing.getCover());"></div>
            <p class="type">@Listing.Product.Name</p>
            <table>
                <tr>
                    <td>
                        <p class="attr">Price:</p>
                        <p class="price">@Listing.Price</p>
                    </td>
                    <td>
                        <p class="attr">Quantity:</p>
                        <p class="weight">@Listing.Quantity @Listing.Unit</p>
                    </td>
                </tr>
            </table>
            <p class="attr">Best before:</p><br />
            <p class="bestBy">@Listing.getDate()</p>

        </div>
    }
</div>

@code {
    [Parameter]
    public string id { get; set; }

    Company company;
    List<Listing> Listings = new List<Listing>();

    protected override async Task OnParametersSetAsync()
    {
        company = (Company)Companyservice.GetCompany(id);
        company.Name = WebUtility.HtmlDecode(company.Name).Replace("+", " ");
        company.Address = WebUtility.HtmlDecode(company.Address).Replace("+", " ");
        Listings = SocketService.GetListingsFromCompany(company.CompanyId);
        await JSRuntime.InvokeVoidAsync("setTitle", "forager. | " + company.Name);
    }

    public void EditCompany()
    {
        NavigationManager.NavigateTo("/addcompany/" + id);
    }


    public void openListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }

    public async void Delete()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Do you really wish to delete {company.Name}?"))
            return;
        Companyservice.DeleteCompanyWish(Int32.Parse(id));
        await JSRuntime.InvokeVoidAsync("alert", $"Your request to delete {company.Name} was successfully sent to the Moderator.");
    }
}
