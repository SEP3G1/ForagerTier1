@page "/"
@page "/{loggedIn}"
@using ForagerTier1.Models
@using ForagerTier1.Pages.Components
@using ForagerTier1.Persistance
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISocketService SocketService
@inject ICompanyService CompanyService
@inject IUserService UserService


<h1 class="related">Newest listings</h1>
<div class="relatedCont">
    @foreach (Listing Listing in RecommendedListings)
    {
        <ListingCard fromCompanyId="CompanyId" Listing="Listing" />
    }
</div>
<div class="block">
    <h1 class="infoCont">
        Reduce Foodwaste<span class="acc">.</span><br />
        Buy Responsibly<span class="acc">.</span>
    </h1>
    <h3 class="infoCont">
        Resturants are responsible for more than <span class="acc">20%</span> of the total foodwaste in Denmark.
    </h3>
    <h2 class="infoCont">
        Use <span class="bold">forager<span class="acc">.</span></span> to <span class="bold">sell excess</span> of resources and <span class="bold">buy locally</span> from other resturants<span class="acc">.</span>
    </h2>
</div>
@code{
    [Parameter]
    public bool? loggedIn { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    int CompanyId = -1;

    List<Listing> RecommendedListings = new List<Listing>();


    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            CompanyId = ((User)((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetCashedUser()).CompanyId;

        RecommendedListings = (List<Listing>)SocketService.Search(null).Listings;

    }
    public void openListing(int id)
    {
        NavigationManager.NavigateTo($"/listing/{id}");
    }
}